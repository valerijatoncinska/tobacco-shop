================ ResponseDto - класс для возврата ответа клиенту ================

ResponseDto создан для того, чтобы вернуть ответ клиенту.
Он принимает четыре свойства в конструктор или в сеттеры.
1. boolean success - Указывает, ответ положительный или отрицательный.
2. T data - принимает данные на отдачу
3. String message - краткое сообщение
4. String lang - содержит метку языка.

Как это использовать.
Представьте, что вы хотите отдать просто строку клиенту. Этот код ее вернет.

public ResponseEntity<ResponseDto<?>> test() {
    ResponseDto<?> resp = new ResponseDto<>(true,"Просто строка для клиента","ok","ru");
    return ResponseEntity.ok(resp);
}
В этом варианте мы использовали конструктор, в который передали все значения.
1. true - указали, что операция успешно выполнена
2. "Просто строка для клиента" - строка, которая хранится в T data
3. "ok" - краткое сообщение
4. "ru" - указали на каком языке ответ.

Давайте сделаем то же самое, но уже отправим клиенту сообщение о ошибке.
public ResponseEntity<ResponseDto<?>> errorMessage() {
    ResponseDto<?> resp = new ResponseDto<>(false, "Ошибка в загрузке файла","500 internal server error","ru");
    return ResponseEntity.ok(resp);
}
Как можно заметить, у нас true стало false, вместо ok появилось сообщение о ошибке.
Как будет выглядить ответ из первого, успешного варианта.
{
 "success": true,
 "data": "Просто строка для клиента",
 "message": "ok",
 "lang": "ru"
}}
Как выглядит ответ для ошибки.
{
 "success": false,
 "data": "Ошибка! файл не загружен",
 "message": "500 internal server error",
 "lang": "ru"
}

Давайте, ради эксперемента создадим класс пользователя, который вернется ответом клиенту и посмотрим, как ResponseDto его обработает.
public class UserDto {
private Long id;
private String login;
private String email;
private String city;
// Далее конструкторы.
// Далее геттеры и сеттеры.
// просто сейчас лень писать их.
}
Теперь вернем ответ клиенту
public ResponseEntity<ResponseDto<?>> userInfo() {
    UserDto user = new UserDto();
    user.setId(1);
    user.setLogin("Admin");
    user.setEmail("admin@site.com");
    user.setCity("Berlin");
    return ResponseEntity.ok(new ResponseDto<>(true, user, "ok", lang.getCurentLang()));
}
Вот какой ответ будет.
{
 "success": true,
 "data": {
  "id": 1,
  "login": "Admin",
  "email": "admin@site.com",
  "city": "Berlin"
 }
 "message": "ok",
 "lang": "ru"
}
Как видно из ответа, в data уже будет не строка, а объект.
По этой причине, настоятельная рекомендация, в data использовать строковые значения только тогда, когда у вас происходит ошибка и клиента нужно об этом оповестить.
В успешных случаях строки лучше не использовать.

Зачем использовать значение lang?
Для того чтобы клиент мог подготовить ответ на соответствующем языке.
К примеру, если клиентом является браузер, то javascript может, исходя из параметра lang, подготовить страницу для соответствующего языка.
Если у вас используется в lang значение ru, а ответ на английском, то программы экранного доступа будут читать текст некорректно.
