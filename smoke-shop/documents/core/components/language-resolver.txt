================ LanguageResolver.java - класс, управляющий языковыми данными ================

LanguageResolver - это класс, который может управлять языковыми данными в вашем проекте на стороне back end.
Он имеет только два метода.

1. getCurrentLang()
Метод, который будет выводить язык в данный момент.
Он привязан к get параметру lang
Если get параметр пуст, тогда будет подставлено значение из application.properties по ключу language.default
И так, попробуем рассмотреть в примерах.
/users?lang=ru выводит ru
/users?lang=de  выводит de
/users выводит ru, если ru стоит по умолчанию в application.properties по ключу language.default
Зачем нужен этот метод.
1.1. Для ResponseDto. В ответе будет ключ lang, в который будет подставлятся значение из getCurrentLang()
1.2. Для внутринней работы класса.


2. load
Метод, который загружает файл с данными
Принимает два свойства.
2.1. Свойство module
2.2. свойство file
Для начало вам нужно настроить каталог, в ресурсах, где будут лежать языковые переводы.
К примеру resource/modules
В modules создаем каталог users.
Этот каталог будет отвечать за языковые переводы модуля users
В resource/modules/users создаем каталог ru, а так же en, de, is, kz и еще столько, сколько вам нужно языков.
В них нужно создать, хотя бы один properties файл. Название абсолютно не важно. К примеру text.properties.
Важно, чтобы такой файл был в каждом каталоге, иначе это может привести к ошибке при переключении языков.
Полный путь для хранения должен выглядить так.
/src/main/resource/modules/users/ru/text.properties
/src/main/resource/modules/users/en/text.properties
/src/main/resource/modules/users/de/text.properties
/src/main/resource/modules/users/kz/text.properties
/src/main/resource/modules/users/is/text.properties
/src/main/resource/modules/users/uk/text.properties
В главном файле, application.properties, есть настройка language.dir, которая будет указывать каталог для хранения модулей перевода.
Если указать другое значение, то класс LanguageResolver будет искать их там.
К примеру, если указать так.
language.dir=language/modules
То путь должен быть таким
/src/main/resource/language/modules/users/ru/text.properties
Если указать так
language.dir=language/v1/modules
То путь станет другим
/src/main/resource/language/v1/modules/users/ru/text.properties
Но с такими путями вам работать не нужно. За вас это будет делать метод load класса LanguageResolver
Главное помнить про его свойства
Вот пример вызова этого метода.
Properties p = lang.load("users","text")
users - это модуль, который храниться в resource
/src/main/resource/language/modules/users
text - это имя файла, который мы хотим загрузить
/src/main/resource/language/modules/users/ru/text.properties
Но а как же наш метод узнает о том, из какого каталога мы хотим открыть файл? ru, а может de, или может en.
Вот тут к нам приходит getCurrentLang. Этот метод, внутри метода load, помогает, указывая, какой язык используется в данный момент и нам не нужно самим его указывать.
Таким образом, наша задача лишь в том, чтобы вызвать метод load, передать в него имя модуля и имя файла и получить Properties для использования.
Вот пример, как это использовать.
Для начала создадим файл text.properties и поместим такое содержимое.

message1=Hello
message2=world
message3=Жора

Сохраним его.
Теперь в java коде сделаем так.


Properties p = lang.load("users","text");
return p.get("message1"); // Выводит Hello
И так далее.
Если файл не найден, или какая-то другая причина, то код будет остановлен, вы получите ошибку 500 internal_server_error и json объект с пояснениями
Если в файле нет ключа, а вы пытаетесь его вызвать, вы просто получите null вместо значения ключа.
return p.get("message_from_user"); // null
Почему так? А потому, что в text.properties нет ключа message_from_user

Почему был выбран имено *.properties вместо того, чтобы использовать *.json или  хранить в классах.
1. Работа с properties оказалась быстрей в плане разработке и понимания.
2. Для json нужно создать свой класс с нуля, даже используя инструменты boot spring, легче это не будет.
3. хранить надписи в java классах может ускорить приложение, но будет тяжелей поддерживать. И после каждого исправления нужно будет перекомпилировать приложение.

И в заключение вот вам код простого тестового контроллера

package de.darom.modules.users.controller;
// modules=users

import de.darom.core.components.LanguageResolver;
import de.darom.core.components.ResponseDto;
import org.springframework.core.env.PropertiesPropertySource;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Properties;


@RestController
@RequestMapping("/author")
/**
 * Контроллер авторизации
 */
public class Author {
    private LanguageResolver lang; // для работы с мультиязычностью

    public Author(LanguageResolver lang) {
        this.lang = lang;
    }
    @GetMapping("/test")
    public ResponseEntity<ResponseDto<?>> test() {
        Properties p = lang.load("users","errors");
        ResponseDto<?> resp = new ResponseDto(lang.getCurrentLang(),p.get("one22"),"ok",true);
        return ResponseEntity.ok(resp);
    }

}

Обратите внимание на то, как происходит вызов LanguageResolver
private LanguageResolver lang;
это позволяет далее вызывать методы класса внутри нашего контроллера.
Наглядный пример в методе test()

Внимание! Если вы хотите LanguageResolver использовать вне boot spring, пожалуйста помните, что ему нужен класс ParseProperties или оформити сами что-то подобное, что загрузит данные из properties файла.