================ Описание ================
================ 24.07.2024 ================


Давайте поймем, почему я решил создать свое back end ядро, отказавшись от тех вариантов, которые нам предаставили Андрей и Станислав.
1. И Андрей и Станислав давали просто учебный вариант. Вариант, который был просто рабочим, но не идиальным.
2. Соответственно это сильно напрягало, что контроллеры все в одном пакете, так же сервисы и репозитории.
3. Это приводило к тому, что происходил форменный бардак, в котором пришлось бы искать, где контроллер блога, а где контроллер пользователей.
4. Тот вариант, который был мной создан, по моему мнению, превносит стиль и порядок.
5. В таком варианте проще создавать свои модули.
6. Это позволяет изолировать модули друг от друга, не мешая другим разработчикам.
7. Однако, возможность из одного модуля обращаться в другой все равно остается.

Теперь разберемся с java кодом.
/src/main/de/shop
В этом каталоге находится весь java код.
/src/main/java/de/shop/core
Этот каталог является ядром.
В нем есть несколько каталогов, или пакетов.
components - хранит классы компонентов.
Если вы считаете, что созданный вами код может использоваться в разных модулях, то лучше на него подвесить аннотацию @Components и поместить в core/components
Однако, это не должно протеворечить логики вашего модуля. Если компонент вытягивает из базы какие-то данные, то он не может быть компонентом для всего проекта. Он может быть только компонентом вашего модуля.

config - пакет для конфигурационных файлов.
К примеру там находится SecurityConfig.java

exceptions - пакет для классов обработки ошибок.
В этот пакет нужно помещать все классы, которые вы используете в сочитании throws throw
Так же обратите внимание на то, что в пакете exceptions есть класс GlobalException.java
Он перехватывает все кастомные обработчики ошибок.
Однако, под каждый класс нужно создать свой метод.
Давайте представим, что у вас есть ваш класс для ошибок, к примеру MyErrorException.java
В GlobalExceptions.java нужно сделать так    
@ExceptionHandler(MyErrorException.class)
    public ResponseEntity<ResponseDto<?>> myErrorException(MyErrorException e) {
        ResponseDto<?> resp = new ResponseDto(false, e.getMessage(), "401 - UNAUTHORIZED", lang.getCurrentLang());
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(resp);
    }
В данный момент возвращается статус 401.
Будьте пожалуйста внимательны к возвращаемым статусам.
Это позволит клиенту правильно обрабатывать ответы и отправлять нужные статусы.
Советую ознакомиться с ResponseEntity.status а так же с HttpStatus
К примеру. ResponseEntity.ok() вернет статус 200 ok
HttpStatus.UNAUTHORIZED возвращает 401 unauthorized
HttpStatus.INTERNAL_SERVER_ERROR возвращает 500 - internal server error
И так далее.
метод .body() возвращает тело ответа.
Однако, помните, что не всегда можно  отправить тело ответа.
к примеру, если ошибка 500, то тут ответ не нужен.
Имя метода можно делать любое, главное чтоб в аннотации был класс ошибки, с которой вы работаете.
Так же, в метод, он должен войти как свойство.
Про ошибки все.

Закончили с пакетом core, переходим к пакету modules
/src/main/java/de/shop/modules
этот пакет хранит подпакеты ваших модулей.
К примеру blog, users, shop, news, pages, video, audio и тд.
В каждом модуле должен быть примерно такой порядок пакетов.
control, domain, repository, service
В domain должно быть dto и entity.
Однако, это примерный вариант содержания пакетов. Вы можете добавить свои, но старайтесь создавать controller, domain, service, repository, чтобы другие понимали, что и зачем.

Как понимаете, этот порядок гораздо лучше, чем учебный вариант.

Теперь перейдем к /src/main/resource
Имеется два каталога.
database - тут хранятся данные для liquibase
language - тут хранятся языковые пакеты.
/src/main/resource/language/modules/users
тут хранятся языковые пакеты для модуля пользователей.
/src/main/resource/language/modules/users/ru/reg.properties
Про язык можно почитать
/documents/core/components/LanguageResolver.txt
там будет все подробно указано.

Вот и все, что нужно знать про ядро.